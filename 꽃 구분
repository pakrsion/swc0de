### KNN 알고리즘으로 irsi데이터셋 학습
- 거리기반 알고리즘
- 데이터 정보
    - sepal_length : 꽃받침 길이
    - sepal_width : 꽃밭의 넓이
    - petal_lenght : 꽃잎의 길이
    - petal_width : 꽃잎의 넓이


import numpy as np
import pandas as pd
import sklearn

# 모델 결정 트리
from sklearn.tree import DecisionTreeClassifier
# KNN
from sklearn.neighbors import KNeighborsClassifier
# train, test 데이터 분리
from sklearn.model_selection import train_test_split

# /content/iris (1).csv

# 판다스로 데이터 호출
df = pd.read_csv('/content/iris (1).csv')
df

df.describe()

df.describe(include=object)

df.info()

# 데이터 전처리
# Min-Max 최솟값을 0 최대값을 1 로 데이터를 정규화
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

df[['petal_length']] = scaler.fit_transform(df[['petal_length']])
df[['sepal_length']] =  scaler.fit_transform(df[['sepal_length']])
df[['petal_widhth']] = scaler.fit_transform(df[['petal_width']])
df[['sepal_width']] = scaler.fit_transform(df[['sepal_width']])

df.head()

# 문제 답지 분리
X = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]
X
y = df['species']
y

# X,y
# X = X_train, X_test 문제
# y = y_train, y_test 답지
X_train, X_test, y_train, y_test =  train_test_split(X, y, test_size=0.2, random_state=11)

print(X.shape, X_train.shape, X_test.shape)

# 모델 만들기
knn_model = KNeighborsClassifier(n_neighbors=3)
dt_model = DecisionTreeClassifier(random_state=11)

# 모델 학습
knn_model.fit(X_train, y_train)

dt_model.fit(X_train, y_train)

# 예측
pred1 = knn_model.predict(X_test)

pred2 = dt_model.predict(X_test)

pred1[:5]

pred2[:5]

# 모델 평가 (accuracy_score = 실제 답지, 예측답지)
from sklearn.metrics import accuracy_score
knn_acc = accuracy_score(y_test, pred1)
np.round(knn_acc,4)
dt_acc = accuracy_score(y_test, pred2)
print(np.round(knn_acc,4), np.round(dt_acc,4))
